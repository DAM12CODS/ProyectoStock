using System;

namespace Capa_Entidad
{
    internal class Venta
    {
        private string id_Venta;
        private string fecha_Venta;
        private int cantidad_Venta;
        private double precio_Unitario;
        private double subtotal;
        private double impuesto;
        private double total;

        public Venta(string Id_Venta, string Fecha_Venta, int Cantidad_Venta, double Precio_Unitario, double Subtotal, double Impuesto, double Total)
        {
            // Validaciones en constructor
            if (string.IsNullOrWhiteSpace(Id_Venta))
                throw new ArgumentException("El ID de la venta no puede estar vacío.");

            if (string.IsNullOrWhiteSpace(Fecha_Venta))
                throw new ArgumentException("La fecha de la venta no puede estar vacía.");

            if (Cantidad_Venta <= 0)
                throw new ArgumentException("La cantidad debe ser mayor que cero.");

            if (Precio_Unitario < 0)
                throw new ArgumentException("El precio unitario no puede ser negativo.");

            if (Subtotal < 0)
                throw new ArgumentException("El subtotal no puede ser negativo.");

            if (Impuesto < 0)
                throw new ArgumentException("El impuesto no puede ser negativo.");

            if (Total < 0)
                throw new ArgumentException("El total no puede ser negativo.");

            this.id_Venta = Id_Venta;
            this.fecha_Venta = Fecha_Venta;
            this.cantidad_Venta = Cantidad_Venta;
            this.precio_Unitario = Precio_Unitario;
            this.subtotal = Subtotal;
            this.impuesto = Impuesto;
            this.total = Total;
        }

        public string Id_Venta
        {
            get => id_Venta;
            set
            {
                if (string.IsNullOrWhiteSpace(value))
                    throw new ArgumentException("El ID de la venta no puede estar vacío.");
                id_Venta = value;
            }
        }

        public string Fecha_Venta
        {
            get => fecha_Venta;
            set
            {
                if (string.IsNullOrWhiteSpace(value))
                    throw new ArgumentException("La fecha de la venta no puede estar vacía.");
                fecha_Venta = value;
            }
        }

        public int Cantidad_Venta
        {
            get => cantidad_Venta;
            set
            {
                if (value <= 0)
                    throw new ArgumentException("La cantidad debe ser mayor que cero.");
                cantidad_Venta = value;
            }
        }

        public double Precio_Unitario
        {
            get => precio_Unitario;
            set
            {
                if (value < 0)
                    throw new ArgumentException("El precio unitario no puede ser negativo.");
                precio_Unitario = value;
            }
        }

        public double Subtotal
        {
            get => subtotal;
            set
            {
                if (value < 0)
                    throw new ArgumentException("El subtotal no puede ser negativo.");
                subtotal = value;
            }
        }

        public double Impuesto
        {
            get => impuesto;
            set
            {
                if (value < 0)
                    throw new ArgumentException("El impuesto no puede ser negativo.");
                impuesto = value;
            }
        }

        public double Total
        {
            get => total;
            set
            {
                if (value < 0)
                    throw new ArgumentException("El total no puede ser negativo.");
                total = value;
            }
        }
    }
}
